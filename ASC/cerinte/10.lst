     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, scanf, fprintf, fopen               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll
     9                                  import scanf msvcrt.dll
    10                                  import fprintf msvcrt.dll
    11                                  import fopen msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    12                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    13                                  
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data
    16                                      ; ...
    17 00000000 00000000                    m dd 0
    18 00000004 00000000                    n dd 0
    19 00000008 2564256400                  format_citire db "%d%d", 0
    20 0000000D 257300                      format_citire_s db "%s", 0
    21 00000010 00<rept>                    numar times 50 db 0
    22 00000042 7700                        acces_mode db "w", 0
    23 00000044 6F75747075742E7478-         file_name db "output.txt", 0
    23 0000004D 7400               
    24 0000004F 25730A00                    format_afisare db "%s", 10,0
    25 00000053 FFFFFFFF                    file_descriptor dd -1
    26                                      
    27                                  
    28                                  ; our code starts here
    29                                  segment code use32 class=code
    30                                      start:
    31                                          ; ...
    32 00000000 68[04000000]                    push n
    33 00000005 68[00000000]                    push m
    34 0000000A 68[08000000]                    push format_citire
    35 0000000F FF15[00000000]                  call [scanf]
    36 00000015 83C40C                          add esp, 3 * 4
    37                                          
    38 00000018 68[42000000]                    push acces_mode
    39 0000001D 68[44000000]                    push file_name
    40 00000022 FF15[00000000]                  call [fopen]
    41 00000028 83C408                          add esp, 2 * 4
    42                                          
    43 0000002B 83F800                          cmp eax, 0
    44 0000002E 7463                            je final
    45                                          
    46 00000030 A3[53000000]                    mov dword[file_descriptor], eax
    47                                          
    48                                          citire_numere:
    49 00000035 8B0D[00000000]                      mov ecx, dword[m]
    50 0000003B 83F900                              cmp ecx, 0
    51 0000003E 7453                                je afisare
    52 00000040 49                                  dec ecx
    53 00000041 890D[00000000]                      mov [m], ecx
    54                                              
    55 00000047 68[10000000]                        push numar
    56 0000004C 68[0D000000]                        push format_citire_s
    57 00000051 FF15[00000000]                      call [scanf]
    58 00000057 83C408                              add esp, 2 * 4
    59                                              
    60 0000005A BE[10000000]                        mov esi, numar
    61                                              
    62                                              verificare_numar_cifre:
    63 0000005F AC                                      lodsb 
    64 00000060 3C00                                    cmp al, 0
    65 00000062 7402                                    je ver
    66 00000064 EBF9                                    jmp verificare_numar_cifre
    67                                              
    68                                              
    69                                          
    70                                              ver:
    71 00000066 89F0                                    mov eax, esi
    72 00000068 2D[10000000]                            sub eax, numar
    73                                                  
    74 0000006D 8B1D[04000000]                          mov ebx, [n]
    75 00000073 43                                      inc ebx
    76                                                  
    77 00000074 39D8                                    cmp eax, ebx
    78 00000076 72BD                                    jb citire_numere
    79 00000078 68[10000000]                            push numar
    80 0000007D 68[4F000000]                            push format_afisare 
    81 00000082 FF35[53000000]                          push dword[file_descriptor]
    82 00000088 FF15[00000000]                          call [fprintf]
    83 0000008E 83C40C                                  add esp, 3 * 4
    84 00000091 EBA2                                    jmp citire_numere 
    85                                                  
    86                                                  
    87                                  
    88                                          afisare:
    89                                  
    90                                  
    91                                              
    92                                          
    93                                          final:
    94                                          ; exit(0)
    95 00000093 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    96 00000095 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
