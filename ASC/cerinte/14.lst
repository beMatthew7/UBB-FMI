     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fgets, fopen, printf, fclose               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll
     9                                  import fgets msvcrt.dll
    10                                  import fopen  msvcrt.dll
    11                                  import printf msvcrt.dll 
    12                                  import fclose msvcrt.dll   ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    13                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    14                                  
    15                                  ; our data is declared here (the variables needed by our program)
    16                                  segment data use32 class=data
    17                                      ; ...
    18 00000000 7072657566756E672E-         file_name db "preufung.txt", 0
    18 00000009 74787400           
    19 0000000D 7200                        acces_mode db "r", 0
    20 0000000F FFFFFFFF                    file_descriptor dd -1
    21 00000013 00<rept>                    text times 200 db 0
    22 000000DB 2573200A00                  format_afisare db "%s ", 10, 0
    23                                      
    24                                  
    25                                  ; our code starts here
    26                                  segment code use32 class=code
    27                                      start:
    28                                          ; ...
    29 00000000 68[0D000000]                    push acces_mode
    30 00000005 68[00000000]                    push file_name
    31 0000000A FF15[00000000]                  call [fopen]
    32 00000010 83C408                          add esp, 2 * 4
    33                                          
    34 00000013 83F800                          cmp eax, 0
    35 00000016 0F84B8000000                    je final
    36                                          
    37 0000001C A3[0F000000]                    mov dword[file_descriptor], eax
    38                                          
    39 00000021 FF35[0F000000]                  push dword [file_descriptor]
    40 00000027 68C8000000                      push 200
    41 0000002C 68[13000000]                    push text
    42 00000031 FF15[00000000]                  call [fgets]
    43 00000037 83C40C                          add esp, 3 * 4
    44                                          
    45 0000003A BE[13000000]                    mov esi, text
    46                                          
    47                                          inceput_de_cuvant:
    48 0000003F 89F7                            mov edi, esi
    49                                          
    50                                          citire_caractere:
    51 00000041 AC                                  lodsb
    52 00000042 3C00                                cmp al, 0
    53 00000044 7446                                je verificare_cuvant_final
    54 00000046 3C20                                cmp al, ' '
    55 00000048 7406                                je verificare_cuvant
    56 0000004A 3C2E                                cmp al, '.'
    57 0000004C 7402                                je verificare_cuvant
    58 0000004E EBF1                                jmp citire_caractere
    59                                              
    60                                              
    61                                          verificare_cuvant:
    62 00000050 4E                                  dec esi
    63 00000051 89F0                                mov eax, esi
    64 00000053 29F8                                sub eax, edi
    65 00000055 83F801                              cmp eax, 1
    66 00000058 742F                                je continua
    67 0000005A C0E007                              shl al, 7
    68 0000005D C0E807                              shr al, 7
    69 00000060 3C00                                cmp al, 0
    70 00000062 7425                                je continua
    71                                              
    72                                  
    73 00000064 C60600                              mov byte[esi], 0
    74                                  
    75                                              
    76 00000067 89F0                                mov eax, esi
    77 00000069 29F8                                sub eax, edi
    78 0000006B 66BA0000                            mov dx, 0
    79 0000006F 66BB0200                            mov bx, 2
    80 00000073 66F7F3                              div bx
    81 00000076 C6040720                            mov byte[edi + eax], ' '
    82                                              
    83 0000007A 57                                  push edi
    84 0000007B 68[DB000000]                        push format_afisare
    85 00000080 FF15[00000000]                      call [printf]
    86 00000086 83C408                              add esp, 2 * 4
    87                                              
    88                                              
    89                                              
    90                                              
    91                                              
    92                                              
    93                                              
    94                                              continua:
    95 00000089 46                                  inc esi
    96 0000008A EBB3                                jmp inceput_de_cuvant
    97                                              
    98                                              
    99                                          
   100                                          
   101                                          
   102                                          
   103                                          verificare_cuvant_final:
   104 0000008C 4E                                  dec esi
   105 0000008D 89F0                                mov eax, esi
   106 0000008F 29F8                                sub eax, edi
   107 00000091 83F801                              cmp eax, 1
   108 00000094 74F3                                je continua
   109 00000096 C0E007                              shl al, 7
   110 00000099 C0E807                              shr al, 7
   111 0000009C 3C00                                cmp al, 0
   112 0000009E 74E9                                je continua
   113                                              
   114                                  
   115 000000A0 C60600                              mov byte[esi], 0
   116                                  
   117                                              
   118 000000A3 89F0                                mov eax, esi
   119 000000A5 29F8                                sub eax, edi
   120 000000A7 66BA0000                            mov dx, 0
   121 000000AB 66BB0200                            mov bx, 2
   122 000000AF 66F7F3                              div bx
   123 000000B2 C6040720                            mov byte[edi + eax], ' '
   124                                              
   125 000000B6 57                                  push edi
   126 000000B7 68[DB000000]                        push format_afisare
   127 000000BC FF15[00000000]                      call [printf]
   128 000000C2 83C408                              add esp, 2 * 4
   129                                              
   130                                              
   131                                              
   132                                          close:
   133 000000C5 FF35[0F000000]                      push dword[file_descriptor]
   134 000000CB FF15[00000000]                      call [fclose]
   135 000000D1 83C404                              add esp, 4
   136                                          final:
   137                                          
   138                                          
   139                                          
   140                                      
   141                                          ; exit(0)
   142 000000D4 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   143 000000D6 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
