     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fopen, fread, fclose, fscanf , printf, fgets              ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll 
     9                                  import fopen msvcrt.dll
    10                                  import fread msvcrt.dll
    11                                  import fclose msvcrt.dll
    12                                  import fscanf msvcrt.dll
    13                                  import printf msvcrt.dll
    14                                  import fgets msvcrt.dll   ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    15                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    16                                  
    17                                  ; our data is declared here (the variables needed by our program)
    18                                  segment data use32 class=data
    19                                      ; ...
    20 00000000 696E7075742E747874-         file_name db "input.txt", 0
    20 00000009 00                 
    21 0000000A 7200                        acces_mode db "r", 0
    22 0000000C FFFFFFFF                    file_descriptor dd -1
    23 00000010 00<rept>                    numere times 200 db 0
    24 000000D8 257300                      format db "%s", 0
    25 000000DB 25632000                    format_afisare db "%c ", 0
    26 000000DF 00000000                    numar_min dd 0    
    27                                  ; our code starts here
    28                                  segment code use32 class=code
    29                                      start:
    30                                          ; ...
    31 00000000 68[0A000000]                    push acces_mode
    32 00000005 68[00000000]                    push file_name
    33 0000000A FF15[00000000]                  call [fopen]
    34 00000010 83C408                          add esp, 2 * 4
    35                                          
    36 00000013 83F800                          cmp eax, 0
    37 00000016 745B                            je final
    38                                          
    39 00000018 A3[0C000000]                    mov dword[file_descriptor], eax
    40                                          
    41                                          citire:
    42 0000001D FF35[0C000000]                      push dword [file_descriptor]
    43 00000023 68C8000000                          push 200
    44 00000028 68[10000000]                        push numere
    45 0000002D FF15[00000000]                      call [fgets]
    46 00000033 83C40C                              add esp, 3 * 4
    47                                              
    48 00000036 BE[10000000]                        mov esi, numere
    49                                          inceput_numar:
    50 0000003B C605[DF000000]46                    mov byte [numar_min], 'F'
    51 00000042 89F7                                mov edi, esi
    52 00000044 FC                                  cld
    53                                          parcurgere_numere:
    54 00000045 AC                                  lodsb
    55 00000046 3C00                                cmp al, 0
    56 00000048 7429                                je final
    57 0000004A 3C20                                cmp al, ' '
    58 0000004C 740F                                je afisare_numar_min
    59 0000004E 3A05[DF000000]                      cmp al, byte [numar_min]
    60 00000054 7705                                ja continua
    61 00000056 A2[DF000000]                        mov byte [numar_min], al
    62                                              continua:
    63 0000005B EBE8                                jmp parcurgere_numere
    64                                          
    65                                          
    66                                          afisare_numar_min:
    67 0000005D FF35[DF000000]                  push dword [numar_min]
    68 00000063 68[DB000000]                    push format_afisare
    69 00000068 FF15[00000000]                  call [printf]
    70 0000006E 83C408                          add esp, 2 * 4
    71 00000071 EBC8                            jmp inceput_numar
    72                                          final:
    73                                          
    74                                      
    75                                          ; exit(0)
    76 00000073 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    77 00000075 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
