     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  ;interpretare fara semn
    13                                  ;(a-b+c*128)/(a+b)+e-x
    14                                  segment data use32 class=data
    15                                      ; ...
    16 00000000 08                          a db 8
    17 00000001 04                          b db 4
    18 00000002 0100                        c dw 1
    19 00000004 07000000                    e dd 7
    20 00000008 0500000000000000            x dq 5
    21                                  ; our code starts here
    22                                  segment code use32 class=code
    23                                      start:
    24                                          ; ...
    25 00000000 66BB0000                        mov bx, 0
    26 00000004 8A1D[00000000]                  mov bl, [a] ; bx = a
    27 0000000A 2A1D[01000000]                  sub bl, [b] ; bx = a - b
    28                                          
    29                                          
    30 00000010 66A1[02000000]                  mov ax, [c] ; ax = c
    31 00000016 66B98000                        mov cx, 128
    32 0000001A 66F7E1                          mul cx ; dx:ax = ax * bx = c * 128
    33                                          
    34 0000001D 6601D8                          add ax, bx; dx:ax = (a-b+c*128)
    35                                          
    36 00000020 66B90000                        mov cx, 0
    37 00000024 8A0D[00000000]                  mov cl, [a]
    38 0000002A 020D[01000000]                  add cl, [b] ; cx = a + b
    39                                          
    40 00000030 66F7F1                          div cx; ax = (a-b+c*128)/(a+b)
    41 00000033 6689C1                          mov cx, ax
    42 00000036 B800000000                      mov eax, 0
    43 0000003B 6689C8                          mov ax, cx ; eax = (a-b+c*128)/(a+b)
    44                                          
    45                                          
    46 0000003E 0305[04000000]                  add eax, [e] ; eax = (a-b+c*128)/(a+b)+e
    47                                          
    48 00000044 BA00000000                      mov edx, 0; edx:eax = eax = (a-b+c*128)/(a+b)+e
    49                                          
    50                                          ;ecx:ebx = x
    51 00000049 8B1D[08000000]                  mov ebx, dword [x + 0] ;
    52 0000004F 8B0D[0C000000]                  mov ecx, dword [x + 4] ; mutarea x pe ecx:ebx
    53                                          
    54                                          ; ecx:ebx = (a-b+c*128)/(a+b)+e-x
    55 00000055 F8                              clc
    56 00000056 29D8                            sub eax, ebx
    57 00000058 19CA                            sbb edx, ecx
    58                                          
    59                                          
    60                                          
    61                                          
    62                                          
    63                                          
    64                                          
    65                                          
    66                                          ; exit(0)
    67 0000005A 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    68 0000005C FF15[00000000]                  call    [exit]       ; call exit to terminate the program
