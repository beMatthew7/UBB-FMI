     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, gets , scanf , printf, fprintf  , fopen, fclose           ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll
     9                                  import gets msvcrt.dll 
    10                                  import scanf msvcrt
    11                                  import printf msvcrt.dll 
    12                                  import fopen msvcrt.dll
    13                                  import fclose msvcrt.dll
    14                                  import fprintf msvcrt.dll  ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    15                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    16                                  
    17                                  ; our data is declared here (the variables needed by our program)
    18                                  segment data use32 class=data
    19                                      ; ...
    20 00000000 256400                      format_citire db  "%d", 0
    21 00000003 00<rept>                    n times 5 db 0
    22 00000008 00<rept>                    numar times 10 db 0
    23 00000012 00000000                    suma_nr_pare dd 0
    24 00000016 00000000                    suma_nr_impare dd 0
    25 0000001A 7700                        acces_mode db "w", 0
    26 0000001C 322E74787400                file_name db "2.txt", 0
    27 00000022 FFFFFFFF                    file_descriptor dd -1
    28 00000026 53756D61206E722069-         format_afisare db "Suma nr impare:%x, Suma nr pare %x, Diferenta:%x", 0
    28 0000002F 6D706172653A25782C-
    28 00000038 2053756D61206E7220-
    28 00000041 706172652025782C20-
    28 0000004A 4469666572656E7461-
    28 00000053 3A257800           
    29                                  ; our code starts here
    30                                  segment code use32 class=code
    31                                      start:
    32                                          ; ...
    33 00000000 68[1A000000]                    push acces_mode
    34 00000005 68[1C000000]                    push  file_name
    35 0000000A FF15[00000000]                  call [fopen]
    36 00000010 83C408                          add esp, 2 * 4
    37                                          
    38 00000013 83F800                          cmp eax, 0
    39 00000016 0F8492000000                    je final
    40 0000001C A3[22000000]                    mov dword [file_descriptor], eax
    41                                          
    42                                          
    43 00000021 68[03000000]                    push n
    44 00000026 68[00000000]                    push format_citire
    45 0000002B FF15[00000000]                  call [scanf]
    46 00000031 83C408                          add esp, 2 * 4
    47                                          
    48                                  
    49                                          citire_numere:
    50 00000034 68[08000000]                        push numar
    51 00000039 68[00000000]                        push format_citire
    52 0000003E FF15[00000000]                      call [scanf]
    53                                              
    54 00000044 A1[08000000]                        mov eax, [numar]
    55 00000049 88C3                                mov bl, al
    56 0000004B C0E307                              shl bl, 7
    57 0000004E C0EB07                              shr bl, 7
    58 00000051 80FB00                              cmp bl, 0
    59 00000054 740D                                je par
    60 00000056 A1[08000000]                        mov eax, [numar]
    61 0000005B 0105[16000000]                      add [suma_nr_impare], eax
    62 00000061 EB0B                                jmp continua
    63                                              par:
    64 00000063 A1[08000000]                        mov eax, [numar]
    65 00000068 0105[12000000]                      add [suma_nr_pare], eax
    66                                              continua:
    67 0000006E 832D[03000000]01                    sub dword [n], 1
    68 00000075 8B0D[03000000]                      mov ecx, [n]
    69 0000007B 83F900                              cmp ecx, 0
    70 0000007E 7402                                je afisare_sume
    71 00000080 EBB2                                jmp citire_numere
    72                                              
    73                                          
    74                                          
    75                                          
    76                                          afisare_sume:
    77 00000082 A1[12000000]                        mov eax , dword [suma_nr_pare]
    78 00000087 2B05[16000000]                      sub eax,dword [suma_nr_impare]
    79                                              
    80 0000008D 50                                  push eax
    81 0000008E FF35[12000000]                      push dword [suma_nr_pare]
    82 00000094 FF35[16000000]                      push dword [suma_nr_impare]
    83 0000009A 68[26000000]                        push format_afisare
    84 0000009F FF35[22000000]                      push dword [file_descriptor]
    85 000000A5 FF15[00000000]                      call [fprintf]
    86 000000AB 83C40C                              add esp, 3 * 4
    87                                          
    88                                          final:
    89                                          ; exit(0)
    90 000000AE 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    91 000000B0 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
