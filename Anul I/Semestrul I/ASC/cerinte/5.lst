     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, scanf, printf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll
     9                                  import scanf msvcrt.dll
    10                                  import printf msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    11                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    12                                  
    13                                  ; our data is declared here (the variables needed by our program)
    14                                  segment data use32 class=data
    15                                      ; ...
    16 00000000 257300                      format_citire db "%s", 0
    17 00000003 00<rept>                    sir times 200  db 0
    18 000000CB 00<rept>                    sir_litere_mici times 200 db 0
    19 00000193 00<rept>                    sir_litere_mari times 200 db 0
    20 0000025B 00000000                    i dd 0
    21 0000025F 00000000                    j dd 0
    22 00000263 536972206C69746572-         format_afisare db "Sir litere mici:%s , Sir litere mari:%s", 0
    22 0000026C 65206D6963693A2573-
    22 00000275 202C20536972206C69-
    22 0000027E 74657265206D617269-
    22 00000287 3A257300           
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26                                          ; ...
    27 00000000 68[03000000]                    push sir
    28 00000005 68[00000000]                    push format_citire
    29 0000000A FF15[00000000]                  call [scanf]
    30 00000010 83C408                          add esp, 2 * 4
    31                                          
    32 00000013 BE[03000000]                    mov esi, sir
    33                                          
    34                                          citire_caractere:
    35 00000018 AC                                  lodsb
    36 00000019 3C00                                cmp al, 0
    37 0000001B 7438                                je afisare             
    38 0000001D 3C41                                cmp al, 'A'
    39 0000001F 7217                                jb continua
    40 00000021 3C5A                                cmp al, 'Z'
    41 00000023 7713                                ja continua
    42                                              
    43 00000025 8B1D[5B020000]                      mov ebx, [i]
    44 0000002B 8883[93010000]                      mov [sir_litere_mari + ebx], al
    45 00000031 43                                  inc ebx
    46 00000032 891D[5B020000]                      mov [i], ebx
    47                                              
    48                                              
    49                                              
    50                                              continua:
    51 00000038 3C61                                cmp al, 'a'
    52 0000003A 7217                                jb continua1
    53 0000003C 3C7A                                cmp al, 'z'
    54 0000003E 7713                                ja continua1
    55                                              
    56 00000040 8B1D[5F020000]                      mov ebx,  [j]
    57 00000046 8883[93010000]                      mov [sir_litere_mari + ebx], al
    58 0000004C 43                                  inc ebx
    59 0000004D 891D[5F020000]                      mov [j], ebx
    60                                              
    61                                              continua1:
    62 00000053 EBC3                                jmp citire_caractere
    63                                              
    64                                          afisare:
    65 00000055 BE[93010000]                        mov esi, sir_litere_mari
    66 0000005A 56                                  push esi
    67 0000005B BE[CB000000]                        mov esi, sir_litere_mici
    68 00000060 56                                  push esi
    69 00000061 68[63020000]                        push format_afisare
    70 00000066 FF15[00000000]                      call [printf]
    71 0000006C 83C40C                              add esp, 3 * 4
    72                                          
    73                                          ; exit(0)
    74 0000006F 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    75 00000071 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
