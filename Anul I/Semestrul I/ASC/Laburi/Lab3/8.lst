     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  ;interpretare  semun
    13                                  ;(a*b-2*c*d)/(c-e)+x/a
    14                                  segment data use32 class=data
    15                                      ; ...
    16 00000000 08                          a db 8
    17 00000001 06                          b db 6
    18 00000002 04                          c db 4
    19 00000003 02                          d db 2
    20 00000004 0200                        e dw 2
    21 00000006 2000000000000000            x dq 32
    22                                  
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26                                          ; ...
    27 00000000 A0[00000000]                    mov al, [a] ; al = a
    28 00000005 8A1D[01000000]                  mov bl, [b] ; bl = b
    29 0000000B F6EB                            imul bl ; ax = a * b
    30 0000000D 98                              cwde ; eax = a * b
    31 0000000E 89C1                            mov ecx, eax ; ecx = a * b
    32                                          
    33                                          
    34 00000010 A0[02000000]                    mov al, [c] ; al = c
    35 00000015 8A1D[03000000]                  mov bl, [d] ; bl = d
    36                                          
    37 0000001B F6EB                            imul bl ; ax = c * d
    38 0000001D 98                              cwde; eax = c * d
    39 0000001E 01C0                            add eax, eax ; eax = 2 * c * d
    40                                          
    41 00000020 29C1                            sub ecx, eax
    42                                          
    43 00000022 A0[02000000]                    mov al, [c] ; al = c
    44 00000027 6698                            cbw
    45 00000029 662B05[04000000]                sub ax, [e] ; ax = c - e
    46 00000030 6689C3                          mov bx, ax ; bx = c -e
    47                                          
    48 00000033 51                              push ecx
    49 00000034 6658                            pop ax
    50 00000036 665A                            pop dx ; dx:ax = ecx = (a*b-2*c*d)
    51                                          
    52 00000038 66F7F3                          div bx ; ax = (a*b-2*c*d)/(c-e)
    53 0000003B 6689C3                          mov bx, ax ; bx = (a*b-2*c*d) / (c-e)
    54                                          
    55                                          
    56 0000003E A0[00000000]                    mov al, [a]
    57 00000043 6698                            cbw
    58 00000045 98                              cwde ; eax = a
    59 00000046 89C1                            mov ecx, eax ; ecx = a
    60 00000048 A1[06000000]                    mov eax, dword [x + 0] ;
    61 0000004D 8B15[0A000000]                  mov edx, dword [x + 4] ; mutarea x pe edx:abx
    62                                          
    63 00000053 F7F9                            idiv ecx ; eax = x / a
    64 00000055 89C1                            mov ecx, eax
    65                                          
    66 00000057 6689D8                          mov ax, bx ; ax = (a*b-2*c*d) / (c-e)
    67 0000005A 98                              cwde
    68                                          
    69 0000005B 01C8                            add eax, ecx ; eax = (a*b-2*c*d)/(c-e)+x/a
    70                                          
    71                                          
    72                                          
    73                                          
    74                                          
    75                                          ; exit(0)
    76 0000005D 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    77 0000005F FF15[00000000]                  call    [exit]       ; call exit to terminate the program
