     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  ; interpretarea cu semn
    13                                  segment data use32 class=data
    14                                      ; ...
    15 00000000 07                          a db 7
    16 00000001 1300                        b dw 19
    17 00000003 14000000                    c dd 20
    18 00000007 0A00000000000000            d dq 10
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; ...
    23                                          
    24 00000000 A0[00000000]                    mov al, [a] ; al = al
    25 00000005 6698                            cbw ; al devine ax
    26 00000007 98                              cwde ; ax devine eax
    27 00000008 99                              cdq ; eax devine edx:eax, eax = [a]
    28                                          
    29 00000009 8B1D[07000000]                  mov ebx, dword [d + 0] ;
    30 0000000F 8B0D[0B000000]                  mov ecx, dword [d + 4] ; mutarea d pe ecx:ebx
    31                                          
    32                                         ;edx:eax = a - d
    33 00000015 F8                              clc
    34 00000016 29D8                            sub  eax, ebx
    35 00000018 19CA                            sbb edx, ecx
    36                                          
    37                                          ; ecx:ebx = a -d
    38 0000001A 89C3                            mov ebx, eax
    39 0000001C 89D1                            mov ecx, edx
    40                                          
    41                                          ;ax = b + b
    42 0000001E 66A1[01000000]                  mov ax, [b]
    43 00000024 660305[01000000]                add ax, [b]
    44 0000002B 98                              cwde ; eax = b + b
    45                                          
    46                                          ; eax = b + b +c
    47 0000002C 0305[03000000]                  add eax, [c]
    48 00000032 99                              cdq ; edx:eax = b + b +c
    49                                          
    50                                          ; edx:eax = a-d+b+b+c
    51 00000033 F8                              clc
    52 00000034 01D8                            add eax, ebx
    53 00000036 11CA                            adc edx, ecx
    54                                          
    55                                          
    56                                          ; exit(0)
    57 00000038 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    58 0000003A FF15[00000000]                  call    [exit]       ; call exit to terminate the program
