     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, scanf, printf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll 
     9                                  import scanf msvcrt.dll
    10                                  import printf msvcrt.dll   ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    11                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    12                                  
    13                                  ; our data is declared here (the variables needed by our program)
    14                                  segment data use32 class=data
    15                                      ; ...
    16 00000000 0000                        a dw 0
    17 00000002 0000                        b dw 0
    18 00000004 00000000                    r dd 0
    19 00000008 00000000                    cat dd 0
    20                                      
    21                                          
    22 0000000C 256400                      format_citire  db '%d', 0
    23 0000000F 436174203D2025642C-         format_afisare db  "Cat = %d, rest = %d", 0
    23 00000018 2072657374203D2025-
    23 00000021 6400               
    24                                  
    25                                  ; our code starts here
    26                                  segment code use32 class=code
    27                                      start:
    28                                          ; ...
    29 00000000 68[00000000]                    push a
    30 00000005 68[0C000000]                    push format_citire
    31 0000000A FF15[00000000]                  call [scanf]
    32 00000010 83C408                          add esp, 4 * 2
    33                                          
    34 00000013 68[02000000]                    push b
    35 00000018 68[0C000000]                    push format_citire
    36 0000001D FF15[00000000]                  call [scanf]
    37 00000023 83C408                          add esp, 4 * 2
    38                                          
    39 00000026 66BA0000                        mov dx, 0
    40 0000002A 66A1[00000000]                  mov ax, [a]
    41 00000030 668B1D[02000000]                mov bx, [b]
    42                                          
    43 00000037 66F7F3                          div bx
    44                                          
    45 0000003A 668915[04000000]                mov [r], dx
    46 00000041 66891D[08000000]                mov [cat], bx
    47                                          
    48 00000048 FF35[04000000]                  push dword [r]
    49 0000004E FF35[08000000]                  push dword [cat]
    50 00000054 68[0F000000]                    push format_afisare
    51 00000059 FF15[00000000]                  call [printf]
    52 0000005F 83C40C                          add esp, 4 * 3
    53                                          
    54                                      
    55                                          ; exit(0)
    56 00000062 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    57 00000064 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
