     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf, scanf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll
     9                                  import scanf msvcrt.dll
    10                                  import printf msvcrt.dll
    11                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    12                                  
    13                                  ; our data is declared here (the variables needed by our program)
    14                                  segment data use32 class=data
    15                                      ; ...
    16 00000000 00000000                    a dd 0
    17 00000004 00000000                    b dd 0
    18 00000008 00000000                    rezultat dd 0
    19 0000000C 5465737420256400            format db 'Test %d', 0
    20                                  
    21                                  ; our code starts here
    22                                  segment code use32 class=code
    23                                      start:
    24                                          ; ...
    25 00000000 68[00000000]                    push a
    26 00000005 68[0C000000]                    push format
    27 0000000A FF15[00000000]                  call [scanf]
    28 00000010 83C408                          add esp, 4 * 2
    29 00000013 68[04000000]                    push b
    30 00000018 68[0C000000]                    push format
    31 0000001D FF15[00000000]                  call [scanf]
    32 00000023 83C408                          add esp, 4 * 2
    33                                          
    34 00000026 A1[00000000]                    mov eax, [a]
    35 0000002B 0305[04000000]                  add eax, dword [b]
    36 00000031 8B1D[00000000]                  mov ebx, [a]
    37 00000037 1B1D[04000000]                  sbb ebx, dword [b]
    38                                          
    39 0000003D 50                              push eax
    40 0000003E 6658                            pop ax
    41 00000040 665A                            pop dx
    42                                          
    43 00000042 66F7F3                          div bx
    44                                          
    45 00000045 66A3[08000000]                  mov [rezultat], ax
    46                                          
    47 0000004B FF35[08000000]                  push dword[rezultat]
    48 00000051 68[0C000000]                    push format
    49 00000056 FF15[00000000]                  call [printf]
    50 0000005C 83C408                          add esp, 4 * 2
    51                                          ; exit(0)
    52 0000005F 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    53 00000061 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
