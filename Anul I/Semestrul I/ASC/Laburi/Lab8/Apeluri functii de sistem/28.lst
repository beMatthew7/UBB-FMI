     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, scanf, printf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import scanf msvcrt.dll
    10                                  import printf msvcrt.dll     ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    11                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    12                                  
    13                                  ; our data is declared here (the variables needed by our program)
    14                                  segment data use32 class=data
    15                                      ; ...
    16 00000000 256400                      format_citire db '%d', 0
    17 00000003 00000000                    a dd 0
    18 00000007 00000000                    max dd 0
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; ...
    23                                          citire:
    24 00000000 68[03000000]                    push a
    25 00000005 68[00000000]                    push format_citire
    26 0000000A FF15[00000000]                  call [scanf]
    27 00000010 83C408                          add esp, 2 * 4
    28                                          
    29 00000013 A1[03000000]                    mov eax, [a]
    30 00000018 8B1D[07000000]                  mov ebx, [max]
    31                                       
    32 0000001E 83F800                          cmp eax, 0
    33 00000021 740B                            je afisare
    34 00000023 39D8                            cmp eax, ebx
    35 00000025 7CD9                            jl citire
    36 00000027 A3[07000000]                    mov [max], eax
    37                                          
    38                                  
    39 0000002C EBD2                            jmp citire
    40                                          
    41                                          afisare:
    42                                          
    43 0000002E FF35[07000000]                  push dword [max]
    44 00000034 68[00000000]                    push format_citire
    45 00000039 FF15[00000000]                  call [printf]
    46 0000003F 83C408                          add esp, 2 * 4
    47                                          
    48                                          ; exit(0)
    49 00000042 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    50 00000044 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
