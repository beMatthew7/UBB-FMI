     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, scanf, printf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import scanf msvcrt.dll
    10                                  import printf msvcrt.dll   ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    11                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    12                                  
    13                                  ; our data is declared here (the variables needed by our program)
    14                                  segment data use32 class=data
    15                                      ; ...
    16 00000000 00000000                    a dd 0
    17 00000004 00000000                    b dd 0
    18 00000008 00000000                    c dd 0
    19 0000000C 00000000                    suma dd 0
    20 00000010 00000000                    diferenta dd 0
    21 00000014 257800                      afisare db "%x", 0
    22 00000017 2564256400                  format db "%d%d", 0
    23                                  
    24                                  ; our code starts here
    25                                  segment code use32 class=code
    26                                      start:
    27                                          ; ...
    28 00000000 68[00000000]                    push a
    29 00000005 68[04000000]                    push b
    30 0000000A 68[17000000]                    push format
    31 0000000F FF15[00000000]                  call [scanf]
    32 00000015 83C40C                          add esp, 4 * 3
    33                                          
    34 00000018 B800000000                      mov eax, 0
    35 0000001D 66A1[00000000]                  mov ax, [a]
    36 00000023 660305[04000000]                add ax, [b]
    37                                          
    38 0000002A BB00000000                      mov ebx, 0
    39 0000002F 668B1D[04000000]                mov bx, [b]
    40 00000036 662B1D[00000000]                sub bx, [a]
    41                                          
    42 0000003D 66A3[08000000]                  mov [c], ax
    43 00000043 66891D[0A000000]                mov [c + 2], bx
    44                                          
    45 0000004A FF35[08000000]                  push dword [c]
    46 00000050 68[14000000]                    push afisare
    47 00000055 FF15[00000000]                  call [printf]
    48 0000005B 83C408                          add esp, 4 * 2
    49                                          ; exit(0)
    50 0000005E 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    51 00000060 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
