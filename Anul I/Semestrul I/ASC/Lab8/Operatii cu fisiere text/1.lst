     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fread, printf, fopen               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll 
     9                                  import fread msvcrt.dll
    10                                  import printf msvcrt.dll
    11                                  import fopen msvcrt.dll
    12                                    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    13                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    14                                  
    15                                  ; our data is declared here (the variables needed by our program)
    16                                  segment data use32 class=data
    17                                      ; ...
    18 00000000 717772747970736466-         vocale db "qwrtypsdfghjklzxcvbnmQWRTYPSDFGHJKLZXCVBNM", 0
    18 00000009 67686A6B6C7A786376-
    18 00000012 626E6D515752545950-
    18 0000001B 53444647484A4B4C5A-
    18 00000024 584356424E4D00     
    19                                      len equ $-vocale
    20 0000002B 66696C652E74787400          file_name db "file.txt", 0
    21 00000034 7200000000000000            acces_mode dd 'r', 0
    22 0000003C FFFFFFFF                    file_descriptor dd -1
    23 00000040 256400                      format db "%d", 0
    24 00000043 00                          char db 0
    25                                  
    26                                  ; our code starts here
    27                                  segment code use32 class=code
    28                                      start:
    29                                          ; ...
    30 00000000 68[34000000]                    push dword acces_mode
    31 00000005 68[2B000000]                    push dword file_name
    32 0000000A FF15[00000000]                  call [fopen]
    33 00000010 83C408                          add esp, 2 * 4
    34                                          
    35 00000013 BB00000000                      mov ebx, 0
    36 00000018 A3[3C000000]                    mov dword [file_descriptor], eax
    37 0000001D 83F800                          cmp eax, 0
    38 00000020 7447                            je final
    39                                          
    40                                          citeste_caractere:
    41 00000022 FF35[3C000000]                  push dword [file_descriptor]
    42 00000028 6A01                            push dword 1
    43 0000002A 6A01                            push dword 1
    44 0000002C 68[43000000]                    push dword char
    45 00000031 FF15[00000000]                  call [fread]
    46 00000037 83F800                          cmp eax, 0
    47 0000003A 741E                            je afisare
    48                                          
    49 0000003C 83C410                          add esp, 4 * 4
    50 0000003F BE[00000000]                    mov esi, vocale
    51 00000044 B92B000000                      mov ecx, len
    52 00000049 FC                              cld
    53                                          
    54                                          repeta:
    55 0000004A AC                                  lodsb
    56 0000004B 3A05[43000000]                      cmp al, byte [char]
    57 00000051 7503                                jnz next
    58 00000053 83C301                              add ebx, 1
    59                                              next:
    60 00000056 E2F2                                loop repeta
    61 00000058 EBC8                            jmp citeste_caractere
    62                                  
    63                                              
    64                                          afisare:
    65 0000005A 53                                  push ebx
    66 0000005B 68[40000000]                        push dword format
    67 00000060 FF15[00000000]                      call [printf]
    68 00000066 83C408                              add esp, 4 * 2
    69                                          
    70                                  
    71                                          
    72                                          final:
    73                                          ; exit(0)
    74 00000069 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    75 0000006B FF15[00000000]                  call    [exit]       ; call exit to terminate the program
