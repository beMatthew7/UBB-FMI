     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  extern fopen, fclose, fread, printf, scanf, fprintf
    11                                  import fopen msvcrt.dll
    12                                  import fclose msvcrt.dll
    13                                  import fread msvcrt.dll
    14                                  import printf msvcrt.dll
    15                                  import scanf msvcrt.dll
    16                                  import fprintf msvcrt.dll   ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    17                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    18                                  
    19                                  ; our data is declared here (the variables needed by our program)
    20                                  segment data use32 class=data
    21                                      ; ...
    22 00000000 00<rept>                    nume_fisier times 30 db 0
    23 0000001E <res 00000078>              text times 120 resb 1
    24 00000096 257300                      format_citire db "%s", 0
    25 00000099 7700000000000000            access_mode dd 'w', 0
    26 000000A1 FFFFFFFF                    file_descriptor dd -1
    27                                      
    28                                  ; our code starts here
    29                                  segment code use32 class=code
    30                                      start:
    31                                          ; ...
    32 00000000 68[00000000]                    push nume_fisier
    33 00000005 68[96000000]                    push format_citire
    34 0000000A FF15[00000000]                  call [scanf]
    35 00000010 83C408                          add esp, 2 * 4
    36                                  
    37                                          
    38 00000013 68[1E000000]                    push text
    39 00000018 68[96000000]                    push format_citire
    40 0000001D FF15[00000000]                  call [scanf]
    41                                          
    42 00000023 68[99000000]                    push access_mode
    43 00000028 68[00000000]                    push nume_fisier
    44 0000002D FF15[00000000]                  call [fopen] 
    45                                          
    46 00000033 83F800                          cmp eax, 0
    47 00000036 742D                            je final
    48                                          
    49 00000038 A3[A1000000]                    mov dword [file_descriptor], eax
    50                                          
    51 0000003D 68[1E000000]                    push text
    52 00000042 68[96000000]                    push format_citire
    53 00000047 FF35[A1000000]                  push dword [file_descriptor]
    54 0000004D FF15[00000000]                  call [fprintf]
    55 00000053 83C40C                          add esp, 4 * 3
    56                                          
    57 00000056 FF35[A1000000]                  push dword[file_descriptor]
    58 0000005C FF15[00000000]                  call [fclose]
    59 00000062 83C404                          add esp, 4
    60                                          
    61                                          
    62                                          
    63                                          
    64                                          final:
    65                                      
    66                                          ; exit(0)
    67 00000065 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    68 00000067 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
