     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  ;interpretare cu semn
    13                                  ;(a-b+c*128)/(a+b)+e-x
    14                                  
    15                                  segment data use32 class=data
    16                                      ; ...
    17 00000000 08                          a db 8
    18 00000001 04                          b db 4
    19 00000002 0100                        c dw 1
    20 00000004 07000000                    e dd 7
    21 00000008 0500000000000000            x dq 5
    22                                  
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26                                          ; ...
    27 00000000 A0[00000000]                    mov al, [a] ; al = a
    28 00000005 2A05[01000000]                  sub al, [b] ; al = a - b
    29 0000000B 6698                            cbw
    30 0000000D 98                              cwde ; eax = a - b
    31                                          
    32 0000000E 89C3                            mov ebx, eax ; ebx = a - be
    33 00000010 66A1[02000000]                  mov ax, [c] ; ax = c
    34 00000016 66B98000                        mov cx, 128 ; cx = 128
    35 0000001A 66F7E9                          imul cx ; dx:ax = ax * cx = c * 128
    36                                          
    37 0000001D 6652                            push dx
    38 0000001F 6650                            push ax
    39 00000021 58                              pop eax ; eax = dx:ax = c * 128
    40                                          
    41 00000022 01C3                            add ebx, eax ; ebx = (a-b+c*128)
    42                                          
    43 00000024 A0[00000000]                    mov al, [a] ; al = a
    44 00000029 0205[01000000]                  add al, [b] ; al = a + b
    45 0000002F 6698                            cbw ; ax = a + b
    46                                          
    47 00000031 6689C1                          mov cx, ax ; cx = a + b
    48                                          
    49 00000034 53                              push ebx
    50 00000035 6658                            pop ax
    51 00000037 665A                            pop dx ;dx:ax = eax = (a-b+c*128)
    52                                          
    53 00000039 66F7F9                          idiv cx ; ax = (a-b+c*128)/(a+b)
    54                                          
    55 0000003C 98                              cwde ; eax = (a-b+c*128)/(a+b)
    56                                          
    57 0000003D 0305[04000000]                  add eax, [e] ; eax = (a-b+c*128)/(a+b)+e
    58 00000043 99                              cdq ; edx:eax = (a-b+c*128)/(a+b)+e
    59                                          
    60                                          ;ecx:ebx = x
    61 00000044 8B1D[08000000]                  mov ebx, dword [x + 0] ;
    62 0000004A 8B0D[0C000000]                  mov ecx, dword [x + 4] ; mutarea x pe ecx:ebx
    63                                          
    64 00000050 F8                              clc
    65 00000051 29D8                            sub eax, ebx
    66 00000053 19CA                            sbb edx, ecx ; edx:eax = (a-b+c*128)/(a+b)+e-x
    67                                  
    68                                          
    69                                          
    70                                          
    71                                          
    72                                          ; exit(0)
    73 00000055 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    74 00000057 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
