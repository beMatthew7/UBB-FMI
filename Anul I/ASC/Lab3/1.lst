     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  ;interpretare fara semn
    13                                  ;(d + d -  b) + (c - a) + d
    14                                  segment data use32 class=data
    15                                      ; ...
    16 00000000 07                          a db 7
    17 00000001 1300                        b dw 19
    18 00000003 14000000                    c dd 20
    19 00000007 6400000000000000            d dq 100
    20                                          
    21                                  ; our code starts here
    22                                  segment code use32 class=code
    23                                      start:
    24                                          ; ...
    25                                          ; punem d-ul pe eax:edx
    26 00000000 A1[07000000]                    mov eax, dword [d + 0]
    27 00000005 8B15[0B000000]                  mov edx, dword [d + 4]
    28                                          ; punem d-ul pe ecx:ebx
    29 0000000B 8B1D[07000000]                  mov ebx, dword [d + 0]
    30 00000011 8B0D[0B000000]                  mov ecx, dword [d + 4]
    31                                          
    32                                          ;ecx:ebx = d + d
    33 00000017 F8                              clc
    34 00000018 01C3                            add ebx, eax ; ebx = ebx + eax 
    35 0000001A 11D1                            adc ecx, edx ; ecx = ecx + edx 
    36                                          
    37 0000001C B800000000                      mov eax, 0
    38 00000021 BA00000000                      mov edx, 0
    39 00000026 66A1[01000000]                  mov ax, [b]; edx:eax = b
    40                                          
    41                                          ;ecx:ebx = d + d - b
    42 0000002C F8                              clc
    43 0000002D 29C3                            sub ebx, eax ; ebx = ebx - eax
    44 0000002F 19D1                            sbb ecx, edx ; ecx = ecx - edx
    45                                          
    46                                          
    47 00000031 A1[03000000]                    mov eax, [c]
    48 00000036 BA00000000                      mov edx, 0
    49 0000003B 8A15[00000000]                  mov dl, [a]
    50 00000041 29D0                            sub eax, edx ; eax = eax - edx = (c - a)
    51 00000043 BA00000000                      mov edx, 0
    52                                          
    53                                          
    54                                          ;ecx:ebx = (d+d-b)+(c-a)
    55 00000048 F8                              clc
    56 00000049 01C3                            add ebx, eax ; ebx = ebx + eax
    57 0000004B 11D1                            adc ecx, edx ; ecx = ecx + edx
    58                                          
    59                                          ; edx:eax = d
    60 0000004D A1[07000000]                    mov eax, dword [d + 0]
    61 00000052 8B15[0B000000]                  mov edx, dword [d + 4]
    62                                          
    63                                          
    64                                          ;ebx:ecx = (d+d-b)+(c-a)+d
    65 00000058 F8                              clc
    66 00000059 01C3                            add ebx, eax ; ebx = ebx + eax
    67 0000005B 11D1                            adc ecx, edx ; ecx = ecx + edx
    68                                          
    69                                          
    70                                          
    71                                          
    72                                          
    73                                      
    74                                          ; exit(0)
    75 0000005D 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    76 0000005F FF15[00000000]                  call    [exit]       ; call exit to terminate the program
