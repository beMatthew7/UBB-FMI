     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  ;interpretare fara semn
    13                                  ;(a*b-2*c*d)/(c-e)+x/a
    14                                  segment data use32 class=data
    15                                      ; ...
    16 00000000 08                          a db 8
    17 00000001 06                          b db 6
    18 00000002 04                          c db 4
    19 00000003 02                          d db 2
    20 00000004 0200                        e dw 2
    21 00000006 2000000000000000            x dq 32
    22                                  
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26                                          ; ...
    27 00000000 A0[00000000]                    mov al, [a]; al = a
    28 00000005 8A1D[01000000]                  mov bl, [b]; bl = b
    29                                          
    30 0000000B F6E3                            mul bl ; ax = a * b
    31 0000000D B900000000                      mov ecx, 0
    32 00000012 6689C1                          mov cx, ax ; ecx = a * b
    33                                          
    34 00000015 BB00000000                      mov ebx, 0
    35 0000001A A0[02000000]                    mov al, [c] ; al = c
    36 0000001F 8A1D[03000000]                  mov bl, [d] ; bl = d
    37                                          
    38 00000025 F6E3                            mul bl ; ax = c * d
    39 00000027 6689C3                          mov bx, ax
    40 0000002A 01DB                            add ebx, ebx ; ebx = 2 * c * d
    41                                         
    42                                          
    43 0000002C 29D9                            sub ecx, ebx ; ecx = (a*b-2*c*d)
    44                                          
    45 0000002E 66BB0000                        mov bx, 0
    46 00000032 8A1D[02000000]                  mov bl , [c] ; bx = c
    47                                          
    48 00000038 662B1D[04000000]                sub bx, [e] ; bx = c - e
    49                                          
    50 0000003F 51                              push ecx
    51 00000040 6658                            pop ax
    52 00000042 665A                            pop dx ; dx:ax = ecx = (a*b-2*c*d)
    53                                          
    54 00000044 66F7F3                          div bx ; ax = (a*b-2*c*d)/(c-e)
    55 00000047 6689C3                          mov bx, ax ; bx = (a*b-2*c*d)/(c-e)
    56                                          
    57                                          ;ecx:ebx = x
    58 0000004A A1[06000000]                    mov eax, dword [x + 0] ;
    59 0000004F 8B15[0A000000]                  mov edx, dword [x + 4] ; mutarea x pe edx:abx
    60                                          
    61 00000055 B900000000                      mov ecx, 0
    62 0000005A 8A0D[00000000]                  mov cl, [a] ; ecx = a
    63                                          
    64 00000060 F7F1                            div ecx ; eax = x / a
    65                                          
    66 00000062 6689D9                          mov cx, bx
    67 00000065 BB00000000                      mov ebx, 0
    68 0000006A 6689CB                          mov bx, cx ; ebx = (a*b-2*c*d)/(c-e)
    69                                          
    70 0000006D 01C3                            add ebx, eax ; ebx = (a*b-2*c*d)/(c-e)+x/a
    71                                          
    72                                          
    73                                          
    74                                          ; exit(0)
    75 0000006F 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    76 00000071 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
