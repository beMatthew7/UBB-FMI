     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 01060301                    s db 1, 6, 3, 1
    15                                      len_s equ $-s
    16 00000004 <res 00000003>              d resb len_s-1
    17                                  
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21                                          ; ...
    22 00000000 B903000000                      mov ecx, len_s - 1
    23 00000005 BE00000000                      mov esi, 0 ; pozitita in sirul s
    24 0000000A 83F900                          cmp ecx, 0
    25 0000000D 7E19                            jle final
    26                                          repeta:
    27 0000000F 8A86[00000000]                      mov al, [s + esi]
    28 00000015 6698                                cbw ; ax = [s + esi]
    29 00000017 8A9E[01000000]                      mov bl, [s + esi + 1]
    30                                              
    31 0000001D F6FB                                idiv bl ; al = catul
    32                                              
    33 0000001F 8886[04000000]                      mov [d + esi], al
    34                                              
    35 00000025 46                                  inc esi
    36                                              
    37 00000026 E2E7                            loop repeta
    38                                              
    39                                              
    40                                          
    41                                          
    42                                          
    43                                          
    44                                          
    45                                          
    46                                          final:
    47                                          ; exit(0)
    48 00000028 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    49 0000002A FF15[00000000]                  call    [exit]       ; call exit to terminate the program
