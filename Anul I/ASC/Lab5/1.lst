     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 2B3432614033242A            s db '+', '4', '2', 'a', '@', '3', '$', '*'
    15                                      len equ $-s
    16 00000008 2140232425265E2A            caract db "!@#$%&^*"
    17                                      lenc equ $-caract
    18 00000010 <res 00000008>              d resb len
    19                                  
    20                                  ; our code starts here
    21                                  segment code use32 class=code
    22                                      start:
    23                                          ; ...
    24 00000000 B908000000                      mov ecx, len
    25 00000005 BE00000000                      mov esi, 0 ; pozitia in s
    26 0000000A BF00000000                      mov edi, 0 ; pozitia lui d
    27                                          
    28 0000000F E32D                            jecxz final
    29                                          repeta:
    30 00000011 8A86[00000000]                      mov al, [s + esi] ; caracte din sirul sursa
    31                                              
    32 00000017 51                                  push ecx
    33 00000018 56                                  push esi
    34                                              
    35 00000019 B908000000                          mov ecx, lenc
    36 0000001E BE00000000                          mov esi, 0
    37                                              
    38                                              repeta2:
    39 00000023 8A9E[08000000]                          mov bl, [caract + esi]
    40 00000029 38D8                                    cmp al, bl ; le comparam
    41 0000002B 7509                                    jne final2            
    42                                                  
    43 0000002D 8887[10000000]                          mov [d + edi], al
    44 00000033 47                                      inc edi ; trece in urmaotrea pozitie si in sirul destinatie
    45 00000034 EB03                                    jmp gasit
    46                                                  
    47                                                  final2:
    48 00000036 46                                      inc esi ; trecem la urmatorul caracter
    49 00000037 E2EA                                loop repeta2
    50                                              gasit:
    51 00000039 5E                                  pop esi
    52 0000003A 59                                  pop ecx
    53                                              
    54 0000003B 46                                  inc esi
    55                                              
    56                                          
    57 0000003C E2D3                            loop repeta
    58                                          final:
    59                                          
    60                                      
    61                                          ; exit(0)
    62 0000003E 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    63 00000040 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
