     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, scanf, printf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import scanf msvcrt.dll
    10                                  import printf msvcrt.dll ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    11                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    12                                  
    13                                  ; our data is declared here (the variables needed by our program)
    14                                  segment data use32 class=data
    15                                      ; ...
    16 00000000 00000000                    a dd 0
    17 00000004 00000000                    b dd 0
    18 00000008 2564256400                  format_citire db "%d%d", 0
    19 0000000D 2564203C20256400            format_a1 db "%d < %d", 0
    20 00000015 2564203D20256400            format_a2 db "%d = %d", 0
    21 0000001D 2564203E20256400            format_a3 db "%d > %d", 0
    22                                      
    23                                      
    24                                      
    25                                      
    26                                  
    27                                  ; our code starts here
    28                                  segment code use32 class=code
    29                                      start:
    30                                          ; ...
    31 00000000 68[00000000]                    push a
    32 00000005 68[04000000]                    push b
    33 0000000A 68[08000000]                    push format_citire
    34 0000000F FF15[00000000]                  call [scanf]
    35                                          
    36 00000015 A1[00000000]                    mov eax, [a]
    37 0000001A 8B1D[04000000]                  mov ebx, [b]
    38                                          
    39 00000020 39D8                            cmp eax, ebx
    40 00000022 7404                            je egal
    41 00000024 7C1E                            jl mai_mic
    42 00000026 7F38                            jg mai_mare
    43                                          
    44                                          egal:
    45 00000028 FF35[00000000]                  push dword[a]
    46 0000002E FF35[04000000]                  push dword[b]
    47 00000034 68[15000000]                    push format_a2
    48 00000039 FF15[00000000]                  call [printf]
    49 0000003F 83C40C                          add esp, 3 * 4
    50                                          
    51 00000042 EB38                            jmp final
    52                                          
    53                                          mai_mic:
    54 00000044 FF35[00000000]                  push dword [a]
    55 0000004A FF35[04000000]                  push dword [b]
    56 00000050 68[1D000000]                    push format_a3
    57 00000055 FF15[00000000]                  call [printf]
    58 0000005B 83C40C                          add esp, 3 * 4
    59 0000005E EB1C                            jmp final
    60                                          
    61                                          mai_mare:
    62 00000060 FF35[00000000]                  push dword [a]
    63 00000066 FF35[04000000]                  push dword [b]
    64 0000006C 68[0D000000]                    push format_a1
    65 00000071 FF15[00000000]                  call [printf]
    66 00000077 83C40C                          add esp, 3 * 4
    67 0000007A EB00                            jmp final
    68                                          
    69                                          final:
    70                                          ; exit(0)
    71 0000007C 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    72 0000007E FF15[00000000]                  call    [exit]       ; call exit to terminate the program
