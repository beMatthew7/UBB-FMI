     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, scanf, printf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import scanf msvcrt.dll
    10                                  import printf msvcrt.dll     ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    11                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    12                                  
    13                                  ; our data is declared here (the variables needed by our program)
    14                                  segment data use32 class=data
    15                                      ; ...
    16 00000000 00000000                    a dd 0
    17 00000004 00000000                    b dd 0
    18 00000008 2578257800                  format_h db "%x%x", 0
    19 0000000D 2563256300                  format_c db "%c%c", 0
    20 00000012 6E7500                      format db "nu" , 0
    21                                  ; our code starts here
    22                                  segment code use32 class=code
    23                                      start:
    24                                          ; ...
    25 00000000 68[00000000]                    push a
    26 00000005 68[04000000]                    push b
    27 0000000A 68[08000000]                    push format_h
    28 0000000F FF15[00000000]                  call [scanf]
    29                                          
    30 00000015 A0[00000000]                    mov al, [a]
    31 0000001A 668B1D[04000000]                mov bx, [b]
    32                                          
    33 00000021 B908000000                      mov ecx, 8
    34                                          verificare:
    35 00000026 38D8                            cmp al, bl
    36 00000028 7407                            je da
    37 0000002A 66D1E3                          shl bx, 1
    38 0000002D E2F7                            loop verificare
    39 0000002F EB14                            jmp nu
    40                                          da:
    41 00000031 6A61                            push 'a'
    42 00000033 6A64                            push 'd'
    43 00000035 68[0D000000]                    push format_c
    44 0000003A FF15[00000000]                  call [printf]
    45 00000040 83C408                          add esp, 4 * 2
    46 00000043 EB0E                            jmp final
    47                                          
    48                                          
    49                                  
    50                                          
    51                                          nu:
    52                                          
    53 00000045 68[12000000]                    push format
    54 0000004A FF15[00000000]                  call [printf]
    55 00000050 83C404                          add esp, 4
    56                                          final :
    57                                          ; exit(0)
    58 00000053 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    59 00000055 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
