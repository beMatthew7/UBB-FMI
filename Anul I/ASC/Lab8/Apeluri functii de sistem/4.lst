     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf, scanf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll
     9                                  import printf msvcrt.dll
    10                                  import scanf msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    11                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    12                                  
    13                                  ; our data is declared here (the variables needed by our program)
    14                                  segment data use32 class=data
    15                                      ; ...
    16 00000000 0000                        a dw 0
    17 00000002 0000                        b dw 0
    18 00000004 00000000                    result dd 0
    19 00000008 256400                      format_citire db '%d', 0
    20 0000000B 2564202A202564203D-         format_afisare db "%d * %d = %d", 0
    20 00000014 20256400           
    21                                  
    22                                  ; our code starts here
    23                                  segment code use32 class=code
    24                                      start:
    25                                          ; ...
    26 00000000 68[00000000]                    push a
    27 00000005 68[08000000]                    push format_citire
    28 0000000A FF15[00000000]                  call [scanf]
    29 00000010 83C408                          add esp, 4 * 2
    30                                          
    31 00000013 68[02000000]                    push b
    32 00000018 68[08000000]                    push format_citire
    33 0000001D FF15[00000000]                  call [scanf]
    34 00000023 83C408                          add esp, 4 * 2
    35                                          
    36 00000026 66A1[00000000]                  mov ax, [a]
    37 0000002C BB00000000                      mov ebx, 0
    38 00000031 668B1D[02000000]                mov bx, [b]
    39 00000038 66F7E3                          mul bx
    40                                          
    41 0000003B 6652                            push dx
    42 0000003D 6650                            push ax
    43 0000003F 58                              pop eax
    44                                          
    45 00000040 A3[04000000]                    mov [result], eax
    46 00000045 B800000000                      mov eax, 0
    47 0000004A 66A1[00000000]                  mov ax, [a]
    48                                          
    49 00000050 FF35[04000000]                  push dword [result]
    50 00000056 53                              push ebx
    51 00000057 50                              push eax
    52 00000058 68[0B000000]                    push dword format_afisare
    53 0000005D FF15[00000000]                  call [printf]
    54 00000063 83C410                          add esp, 4 * 4
    55                                          
    56                                      
    57                                          ; exit(0)
    58 00000066 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    59 00000068 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
