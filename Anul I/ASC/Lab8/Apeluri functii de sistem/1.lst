     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf, scanf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    
     9                                  import printf msvcrt.dll
    10                                  import scanf msvcrt.dll; exit is a function that ends the calling process. It is defined in msvcrt.dll
    11                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    12                                  
    13                                  ; our data is declared here (the variables needed by our program)
    14                                  segment data use32 class=data
    15                                      ; ...
    16 00000000 0000                        numar1 dw 0
    17 00000002 0000                        numar2 dw 0
    18 00000004 256400                      format db '%d', 0
    19 00000007 00000000                    rezultat dd 0
    20 0000000B 256400                      afisare  db '%d', 0
    21                                  
    22                                  ; our code starts here
    23                                  segment code use32 class=code
    24                                      start:
    25                                          ; ...
    26                                  
    27                                  
    28 00000000 68[00000000]                    push dword numar1
    29 00000005 68[04000000]                    push dword format
    30 0000000A FF15[00000000]                  call [scanf]
    31 00000010 83C408                          add esp, 2 * 4
    32                                          
    33 00000013 68[02000000]                    push dword numar2
    34 00000018 68[04000000]                    push dword format
    35 0000001D FF15[00000000]                  call [scanf]
    36 00000023 83C408                          add esp, 2 * 4
    37                                          
    38 00000026 66A1[00000000]                  mov ax, [numar1]
    39 0000002C 668B1D[02000000]                mov bx, [numar2]
    40                                          
    41 00000033 66F7E3                          mul bx
    42                                          
    43                                          
    44                                  
    45 00000036 6652                            push dx
    46 00000038 6650                            push ax
    47 0000003A 58                              pop eax
    48                                          
    49 0000003B A3[07000000]                    mov dword [rezultat], eax
    50                                          
    51 00000040 FF35[07000000]                  push dword [rezultat]
    52 00000046 68[0B000000]                    push dword afisare
    53 0000004B FF15[00000000]                  call [printf]
    54 00000051 83C408                          add esp, 2 * 4
    55                                          
    56                                          ; exit(0)
    57 00000054 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    58 00000056 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
