     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fopen, fread, printf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll 
     9                                  import fopen msvcrt.dll
    10                                  import fread msvcrt.dll
    11                                  import printf msvcrt.dll   ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    12                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    13                                  
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data
    16                                      ; ...
    17 00000000 717772747970736466-         vocale db "qwrtypsdfghjklzxcvbnmQWRTYPSDFGHJKLZXCVBNM", 0
    17 00000009 67686A6B6C7A786376-
    17 00000012 626E6D515752545950-
    17 0000001B 53444647484A4B4C5A-
    17 00000024 584356424E4D00     
    18                                      len1 equ $-vocale
    19 0000002B 66696C652E74787400          file_name db "file.txt", 0
    20 00000034 7200000000000000            acces_mode dd 'r', 0
    21 0000003C FFFFFFFF                    file_descriptor dd -1
    22 00000040 256400                      format db "%d", 0
    23 00000043 00                          char db 0
    24                                  ; our code starts here
    25                                  segment code use32 class=code
    26                                      start:
    27                                          ; ...
    28 00000000 68[34000000]                    push dword acces_mode
    29 00000005 68[2B000000]                    push dword file_name
    30 0000000A FF15[00000000]                  call [fopen]
    31 00000010 83C408                          add esp, 2 * 4
    32                                          
    33 00000013 A3[3C000000]                    mov dword [file_descriptor], eax
    34 00000018 83F800                          cmp eax, 0
    35 0000001B 744C                            je final
    36                                          
    37 0000001D BB00000000                      mov ebx, 0
    38                                          
    39                                          citire:
    40 00000022 FF35[3C000000]                      push dword [file_descriptor]
    41 00000028 6A01                                push dword 1
    42 0000002A 6A01                                push dword 1
    43 0000002C 68[43000000]                        push dword char
    44 00000031 FF15[00000000]                      call [fread]
    45 00000037 83C410                              add esp, 4 * 4
    46 0000003A 83F800                              cmp eax, 0
    47 0000003D 741B                                je afisare
    48                                  
    49                                  
    50 0000003F BE[00000000]                        mov esi, vocale
    51 00000044 B92B000000                          mov ecx, len1
    52 00000049 FC                                  cld
    53                                              
    54                                              repeta:
    55 0000004A AC                                      lodsb
    56 0000004B 3A05[43000000]                          cmp al, byte [char]
    57 00000051 7503                                    jne next
    58 00000053 83C301                                  add ebx,1
    59                                  
    60                                                  
    61                                                  next:
    62 00000056 E2F2                                    loop repeta
    63 00000058 EBC8                                jmp citire  
    64                                                  
    65                                          
    66                                          afisare:
    67                                  
    68                                              
    69 0000005A 53                                  push ebx
    70 0000005B 68[40000000]                        push format
    71 00000060 FF15[00000000]                      call [printf]
    72 00000066 83C408                              add esp, 2 * 4
    73                                              
    74                                          
    75                                          final:
    76                                          ; exit(0)
    77 00000069 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    78 0000006B FF15[00000000]                  call    [exit]       ; call exit to terminate the program
