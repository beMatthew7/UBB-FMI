     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  extern fopen, fclose, fread, printf, scanf, fprintf
    11                                  import fopen msvcrt.dll
    12                                  import fclose msvcrt.dll
    13                                  import fread msvcrt.dll
    14                                  import printf msvcrt.dll
    15                                  import scanf msvcrt.dll
    16                                  import fprintf msvcrt.dll   ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    17                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    18                                  
    19                                  ; our data is declared here (the variables needed by our program)
    20                                  segment data use32 class=data
    21                                      ; ...
    22 00000000 00<rept>                    nume_fisier times 30 db 0
    23 0000001E <res 00000078>              text times 120 resb 1
    24 00000096 257300                      format_citire db "%s", 0
    25 00000099 25730A00                    format_new_line db "%s", 10, 0
    26 0000009D 7700000000000000            access_mode dd 'w', 0
    27 000000A5 FFFFFFFF                    file_descriptor dd -1
    28                                      
    29                                  ; our code starts here
    30                                  segment code use32 class=code
    31                                      start:
    32                                          ; ...
    33 00000000 68[00000000]                    push nume_fisier
    34 00000005 68[96000000]                    push format_citire
    35 0000000A FF15[00000000]                  call [scanf]
    36 00000010 83C408                          add esp, 2 * 4
    37                                  
    38                                          
    39                                  
    40 00000013 68[9D000000]                    push access_mode
    41 00000018 68[00000000]                    push nume_fisier
    42 0000001D FF15[00000000]                  call [fopen] 
    43                                          
    44 00000023 83F800                          cmp eax, 0
    45 00000026 744B                            je final
    46                                          
    47 00000028 A3[A5000000]                    mov dword [file_descriptor], eax
    48                                          
    49                                          
    50                                          repeta:
    51 0000002D 68[1E000000]                        push text
    52 00000032 68[96000000]                        push format_citire
    53 00000037 FF15[00000000]                      call [scanf]
    54 0000003D 83C408                              add esp, 2 * 4
    55                                              
    56 00000040 803D[1E000000]24                    cmp byte[text], '$'
    57 00000047 741B                                je close
    58                                          
    59                                          
    60 00000049 68[1E000000]                        push text
    61 0000004E 68[99000000]                        push format_new_line
    62 00000053 FF35[A5000000]                      push dword [file_descriptor]
    63 00000059 FF15[00000000]                      call [fprintf]
    64 0000005F 83C40C                              add esp, 4 * 3
    65                                          
    66                                          
    67                                          
    68 00000062 EBC9                            jmp repeta
    69                                          close:
    70 00000064 FF35[A5000000]                  push dword[file_descriptor]
    71 0000006A FF15[00000000]                  call [fclose]
    72 00000070 83C404                          add esp, 4
    73                                          
    74                                          
    75                                          
    76                                          
    77                                          final:
    78                                      
    79                                          ; exit(0)
    80 00000073 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    81 00000075 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
