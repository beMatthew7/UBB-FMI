     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, scanf, printf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll
     9                                  import scanf msvcrt.dll  
    10                                  import printf msvcrt.dll  ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    11                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    12                                  
    13                                  ; our data is declared here (the variables needed by our program)
    14                                  segment data use32 class=data
    15                                      ; ...
    16 00000000 00<rept>                    cuvant times 50 db 0
    17 00000032 00000000                    numar dd 0
    18 00000036 257320256400                format_citire db "%s %d", 0
    19 0000003C 00                          rest1 db 0
    20 0000003D 257300                      format_afisare db "%s", 0
    21 00000040 6165696F7500                vocale db "aeiou", 0
    22 00000046 00<rept>                    cuvant_nou times 50 db 0
    23                                      
    24                                  
    25                                  ; our code starts here
    26                                  segment code use32 class=code
    27                                      start:
    28 00000000 68[32000000]                push numar
    29 00000005 68[00000000]                push cuvant
    30 0000000A 68[36000000]                push format_citire
    31 0000000F FF15[00000000]              call [scanf]
    32 00000015 83C40C                      add esp, 3 * 4
    33                                      
    34                                      
    35 00000018 A1[32000000]                mov eax, [numar]
    36 0000001D C0E007                      shl al, 7
    37 00000020 C0E807                      shr al, 7
    38 00000023 3C00                        cmp al, 0
    39 00000025 742E                        je nr_par
    40                                      
    41 00000027 A1[32000000]                mov eax, [numar]
    42 0000002C 50                          push eax
    43 0000002D 6658                        pop ax
    44 0000002F 665A                        pop dx
    45 00000031 66BB1400                    mov bx, 20
    46 00000035 66F7F3                      div bx
    47 00000038 A2[3C000000]                mov byte[rest1], al
    48 0000003D BE[00000000]                mov esi, cuvant
    49 00000042 BF[00000000]                mov edi, cuvant
    50                                          criptare_impar:
    51 00000047 AC                                  lodsb
    52 00000048 3C00                                cmp al, 0
    53 0000004A 743A                                je afisare
    54 0000004C 0205[3C000000]                      add al, [rest1]
    55 00000052 AA                                  stosb
    56 00000053 EBF2                                jmp criptare_impar
    57                                              
    58                                              
    59                                      
    60                                      
    61                                      
    62                                      nr_par:
    63 00000055 BE[00000000]                    mov esi, cuvant
    64 0000005A BF[46000000]                    mov edi, cuvant_nou
    65                                          nr_par_while:
    66 0000005F AC                              lodsb
    67 00000060 3C00                            cmp al, 0
    68 00000062 7437                            je afisare_nou
    69 00000064 3C61                            cmp al, 'a'
    70 00000066 741B                            je continuare
    71 00000068 3C65                            cmp al, 'e'
    72 0000006A 7417                            je continuare
    73 0000006C 3C69                            cmp al, 'i'
    74 0000006E 7413                            je continuare
    75 00000070 3C6F                            cmp al, 'o'
    76 00000072 740F                            je continuare
    77 00000074 3C75                            cmp al, 'u'
    78 00000076 740B                            je continuare
    79 00000078 AA                              stosb
    80 00000079 88C3                            mov bl, al
    81 0000007B B070                            mov al, 'p'
    82 0000007D AA                              stosb
    83 0000007E 88D8                            mov al, bl
    84 00000080 AA                              stosb
    85 00000081 EBDC                            jmp nr_par_while
    86                                          continuare:
    87 00000083 AA                                  stosb
    88 00000084 EBD9                                jmp nr_par_while
    89                                          
    90                                          
    91                                          
    92                                      
    93                                          
    94                                      afisare:
    95 00000086 68[00000000]                    push cuvant
    96 0000008B 68[3D000000]                    push format_afisare
    97 00000090 FF15[00000000]                  call [printf]
    98 00000096 83C408                          add esp, 2 * 4
    99 00000099 EB13                            jmp final
   100                                          
   101                                          afisare_nou:
   102 0000009B 68[46000000]                        push cuvant_nou
   103 000000A0 68[3D000000]                        push format_afisare
   104 000000A5 FF15[00000000]                      call [printf]
   105 000000AB 83C408                              add esp, 2 * 4
   106                                              
   107                                          
   108                                          
   109                                          
   110                                          final:
   111                                          ; ...
   112                                      
   113                                          ; exit(0)
   114 000000AE 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   115 000000B0 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
