     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, gets, printf            ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll
     9                                  import gets msvcrt.dll
    10                                  import printf msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    11                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    12                                  
    13                                  ; our data is declared here (the variables needed by our program)
    14                                  segment data use32 class=data
    15                                      ; ...
    16 00000000 00<rept>                    propozitie times 200 db 0
    17 000000C8 00000000                    numar_litere dd 0
    18 000000CC 25642000                    format_afisare db '%d ', 0
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; ...
    23 00000000 68[00000000]                    push propozitie
    24 00000005 FF15[00000000]                  call [gets]
    25 0000000B 83C404                          add esp, 4
    26                                          
    27 0000000E BE[00000000]                    mov esi, propozitie
    28                                          
    29                                          numarare_litere:
    30 00000013 AC                                  lodsb
    31 00000014 3C00                                cmp al, 0
    32 00000016 7431                                je afisare_finala
    33 00000018 8305[C8000000]01                    add dword[numar_litere], 1
    34 0000001F 3C20                                cmp al, ' '
    35 00000021 7402                                je afisare
    36 00000023 EBEE                                jmp numarare_litere
    37                                           
    38                                  
    39                                          afisare:
    40 00000025 832D[C8000000]01                    sub dword[numar_litere], 1
    41 0000002C FF35[C8000000]                      push dword[numar_litere]
    42 00000032 68[CC000000]                        push format_afisare
    43 00000037 FF15[00000000]                      call [printf]
    44                                              
    45 0000003D C705[C8000000]0000-                 mov dword[numar_litere], 0
    45 00000045 0000               
    46 00000047 EBCA                                jmp numarare_litere
    47                                              
    48                                              
    49                                          afisare_finala: 
    50 00000049 FF35[C8000000]                      push dword[numar_litere]
    51 0000004F 68[CC000000]                        push format_afisare
    52 00000054 FF15[00000000]                      call [printf]
    53                                              
    54 0000005A C705[C8000000]0000-                 mov dword[numar_litere], 0            
    54 00000062 0000               
    55                                              
    56                                          
    57                                          final:
    58                                          ; exit(0)
    59 00000064 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    60 00000066 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
