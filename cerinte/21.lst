     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fopen, fscanf, printf, fgets               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll
     9                                  import fopen msvcrt.dll
    10                                  import fscanf  msvcrt.dll
    11                                  import printf msvcrt.dll
    12                                  import fgets msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    13                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    14                                  
    15                                  ; our data is declared here (the variables needed by our program)
    16                                  segment data use32 class=data
    17                                      ; ...
    18 00000000 746578742E74787400          file_name db "text.txt", 0
    19 00000009 7200                        acces_mode db "r", 0
    20 0000000B 257300                      format_citire db "%s", 0
    21 0000000E 00<rept>                    cuvant times 50 db 0
    22 00000040 FFFFFFFF                    file_descriptor dd -1
    23 00000044 25730A00                    format_afisare db "%s", 10, 0
    24                                      
    25                                      
    26                                  
    27                                  ; our code starts here
    28                                  segment code use32 class=code
    29                                      start:
    30                                          ; ...
    31 00000000 68[09000000]                    push acces_mode
    32 00000005 68[00000000]                    push file_name
    33 0000000A FF15[00000000]                  call [fopen]
    34 00000010 83C408                          add esp, 2 * 4
    35                                          
    36 00000013 83F800                          cmp eax, 0
    37 00000016 743E                            je final
    38                                          
    39 00000018 A3[40000000]                    mov dword[file_descriptor], eax
    40                                          
    41                                          citire_cuvinte:
    42 0000001D FF35[40000000]                      push dword[file_descriptor]
    43 00000023 6A32                                push 50
    44 00000025 68[0E000000]                        push cuvant
    45 0000002A FF15[00000000]                      call [fgets]
    46 00000030 83C408                              add esp, 2 * 4
    47                                              
    48 00000033 83F8FF                              cmp eax, -1
    49 00000036 741E                                je final
    50 00000038 BB00000000                          mov ebx , 0
    51 0000003D 8A1D[0E000000]                      mov bl , [cuvant]
    52                                              
    53 00000043 68[0E000000]                        push cuvant
    54 00000048 68[44000000]                        push format_afisare
    55 0000004D FF15[00000000]                      call [printf]
    56 00000053 83C408                              add esp, 2 * 4
    57                                              
    58                                              ; jmp citire_cuvinte
    59                                              
    60                                      
    61                                      
    62                                      
    63                                          final:
    64                                          ; exit(0)
    65 00000056 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    66 00000058 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
